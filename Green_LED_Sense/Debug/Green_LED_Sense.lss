
Green_LED_Sense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000426  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  0000049a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000037d  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000027b  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002fe  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e4  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001fd  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000018f  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  88:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <convert>:
volatile float Vin;

//Converting ADC reading
void convert(unsigned int x)
{
	Vin = x*5.00/1024.00;
  90:	bc 01       	movw	r22, r24
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__floatunsisf>
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	40 ea       	ldi	r20, 0xA0	; 160
  a0:	50 e4       	ldi	r21, 0x40	; 64
  a2:	0e 94 39 01 	call	0x272	; 0x272 <__mulsf3>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	40 e8       	ldi	r20, 0x80	; 128
  ac:	5a e3       	ldi	r21, 0x3A	; 58
  ae:	0e 94 39 01 	call	0x272	; 0x272 <__mulsf3>
  b2:	60 93 00 01 	sts	0x0100, r22
  b6:	70 93 01 01 	sts	0x0101, r23
  ba:	80 93 02 01 	sts	0x0102, r24
  be:	90 93 03 01 	sts	0x0103, r25
  c2:	08 95       	ret

000000c4 <ADC_init>:


//Initialize ADC
void ADC_init(void)
{
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0); //Prescaler 8 for 125kHz input clock
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //AVcc reference -- Remember to add capacitor to ground on ARef pin
  ce:	ac e7       	ldi	r26, 0x7C	; 124
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN); //Enable ADC
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <ADC_get>:


//Retrieve value from ADC registers
unsigned int ADC_get(int pin)
{
	ADMUX &= ~(1<<MUX0) & ~(1<<MUX1) & ~(1<<MUX2) & ~(1<<MUX3); //Clear previous pin
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	90 83       	st	Z, r25
	ADMUX |= (pin<<MUX0);
  ea:	90 81       	ld	r25, Z
  ec:	89 2b       	or	r24, r25
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	while (!(ADCSRA & (1<<ADIF))) {} //Wait for ADIF bit to be set indicating a complete conversion
  fa:	80 81       	ld	r24, Z
  fc:	84 ff       	sbrs	r24, 4
  fe:	fd cf       	rjmp	.-6      	; 0xfa <ADC_get+0x1a>
	return ADC;
 100:	80 91 78 00 	lds	r24, 0x0078
 104:	90 91 79 00 	lds	r25, 0x0079
}
 108:	08 95       	ret

0000010a <main>:
#include "Interrupt.h"

int main(void)
{
	//Interrupt enabling
	interrupt_init();
 10a:	0e 94 95 00 	call	0x12a	; 0x12a <interrupt_init>
	
	//ADC enabling
	ADC_init();
 10e:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_init>
	
	//LED control
	light_ddr |= (1<<light_ddr_spec);
 112:	57 9a       	sbi	0x0a, 7	; 10
	
	//Power Control
	PRR |= (1<<PRTIM0) | (1<<PRTIM1) | (1<<PRTIM2) | (1<<PRTWI) | (1<<PRUSART0) | (1<<PRSPI);
 114:	e4 e6       	ldi	r30, 0x64	; 100
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8e 6e       	ori	r24, 0xEE	; 238
 11c:	80 83       	st	Z, r24
	
	DDRB |= (1<<DDB0);
 11e:	20 9a       	sbi	0x04, 0	; 4
	
    while(1)
    {
		 set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 120:	83 b7       	in	r24, 0x33	; 51
 122:	81 7f       	andi	r24, 0xF1	; 241
 124:	84 60       	ori	r24, 0x04	; 4
 126:	83 bf       	out	0x33, r24	; 51
 128:	fb cf       	rjmp	.-10     	; 0x120 <main+0x16>

0000012a <interrupt_init>:


//Enabling interrupts
void interrupt_init(void)
{
	sei();
 12a:	78 94       	sei
	EIMSK |= (1<<INT0); //External interrupt 0 is enabled
 12c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00); //Logic change triggers interrupt
 12e:	e9 e6       	ldi	r30, 0x69	; 105
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <__vector_1>:
	
}

//Interrupt from pin 4
ISR(INT0_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	if (PIND & (1<<PIND2)) //If INT0 pin is high
 15c:	4a 9b       	sbis	0x09, 2	; 9
 15e:	36 c0       	rjmp	.+108    	; 0x1cc <__vector_1+0x92>
	{
		collect = 0;
 160:	10 92 06 01 	sts	0x0106, r1
		light_on;
 164:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f e7       	ldi	r18, 0x7F	; 127
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	9e e1       	ldi	r25, 0x1E	; 30
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_1+0x32>
 174:	00 c0       	rjmp	.+0      	; 0x176 <__vector_1+0x3c>
 176:	00 00       	nop
		_delay_ms(motor_movement_time);
		for (int i = 0; i < 1; i++)
		{
			adc_reading = ADC_get(i);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_get>
 180:	90 93 05 01 	sts	0x0105, r25
 184:	80 93 04 01 	sts	0x0104, r24
			convert(adc_reading);
 188:	80 91 04 01 	lds	r24, 0x0104
 18c:	90 91 05 01 	lds	r25, 0x0105
 190:	0e 94 48 00 	call	0x90	; 0x90 <convert>
			if (Vin > 2.5) //Light is not reaching sensor, SNAP still in tube
 194:	60 91 00 01 	lds	r22, 0x0100
 198:	70 91 01 01 	lds	r23, 0x0101
 19c:	80 91 02 01 	lds	r24, 0x0102
 1a0:	90 91 03 01 	lds	r25, 0x0103
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e2       	ldi	r20, 0x20	; 32
 1aa:	50 e4       	ldi	r21, 0x40	; 64
 1ac:	0e 94 35 01 	call	0x26a	; 0x26a <__gesf2>
 1b0:	18 16       	cp	r1, r24
 1b2:	2c f4       	brge	.+10     	; 0x1be <__vector_1+0x84>
			{
				collect += (1<<i); //Bit shift over to collect value
 1b4:	80 91 06 01 	lds	r24, 0x0106
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 06 01 	sts	0x0106, r24
			}
		}
		light_off;
 1be:	5f 98       	cbi	0x0b, 7	; 11
		if (collect > 0)
 1c0:	80 91 06 01 	lds	r24, 0x0106
 1c4:	88 23       	and	r24, r24
 1c6:	19 f0       	breq	.+6      	; 0x1ce <__vector_1+0x94>
		{
			PORTB |= (1<<PORTB0);
 1c8:	28 9a       	sbi	0x05, 0	; 5
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <__vector_1+0x94>
		}
	}
	else {PORTB &= ~(1<<PORTB0);}
 1cc:	28 98       	cbi	0x05, 0	; 5
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__floatunsisf>:
 1f0:	e8 94       	clt
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <__floatsisf+0x12>

000001f4 <__floatsisf>:
 1f4:	97 fb       	bst	r25, 7
 1f6:	3e f4       	brtc	.+14     	; 0x206 <__floatsisf+0x12>
 1f8:	90 95       	com	r25
 1fa:	80 95       	com	r24
 1fc:	70 95       	com	r23
 1fe:	61 95       	neg	r22
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	8f 4f       	sbci	r24, 0xFF	; 255
 204:	9f 4f       	sbci	r25, 0xFF	; 255
 206:	99 23       	and	r25, r25
 208:	a9 f0       	breq	.+42     	; 0x234 <__floatsisf+0x40>
 20a:	f9 2f       	mov	r31, r25
 20c:	96 e9       	ldi	r25, 0x96	; 150
 20e:	bb 27       	eor	r27, r27
 210:	93 95       	inc	r25
 212:	f6 95       	lsr	r31
 214:	87 95       	ror	r24
 216:	77 95       	ror	r23
 218:	67 95       	ror	r22
 21a:	b7 95       	ror	r27
 21c:	f1 11       	cpse	r31, r1
 21e:	f8 cf       	rjmp	.-16     	; 0x210 <__floatsisf+0x1c>
 220:	fa f4       	brpl	.+62     	; 0x260 <__floatsisf+0x6c>
 222:	bb 0f       	add	r27, r27
 224:	11 f4       	brne	.+4      	; 0x22a <__floatsisf+0x36>
 226:	60 ff       	sbrs	r22, 0
 228:	1b c0       	rjmp	.+54     	; 0x260 <__floatsisf+0x6c>
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	8f 4f       	sbci	r24, 0xFF	; 255
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	16 c0       	rjmp	.+44     	; 0x260 <__floatsisf+0x6c>
 234:	88 23       	and	r24, r24
 236:	11 f0       	breq	.+4      	; 0x23c <__floatsisf+0x48>
 238:	96 e9       	ldi	r25, 0x96	; 150
 23a:	11 c0       	rjmp	.+34     	; 0x25e <__floatsisf+0x6a>
 23c:	77 23       	and	r23, r23
 23e:	21 f0       	breq	.+8      	; 0x248 <__floatsisf+0x54>
 240:	9e e8       	ldi	r25, 0x8E	; 142
 242:	87 2f       	mov	r24, r23
 244:	76 2f       	mov	r23, r22
 246:	05 c0       	rjmp	.+10     	; 0x252 <__floatsisf+0x5e>
 248:	66 23       	and	r22, r22
 24a:	71 f0       	breq	.+28     	; 0x268 <__floatsisf+0x74>
 24c:	96 e8       	ldi	r25, 0x86	; 134
 24e:	86 2f       	mov	r24, r22
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	2a f0       	brmi	.+10     	; 0x260 <__floatsisf+0x6c>
 256:	9a 95       	dec	r25
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	88 1f       	adc	r24, r24
 25e:	da f7       	brpl	.-10     	; 0x256 <__floatsisf+0x62>
 260:	88 0f       	add	r24, r24
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	97 f9       	bld	r25, 7
 268:	08 95       	ret

0000026a <__gesf2>:
 26a:	66 d0       	rcall	.+204    	; 0x338 <__fp_cmp>
 26c:	08 f4       	brcc	.+2      	; 0x270 <__gesf2+0x6>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	08 95       	ret

00000272 <__mulsf3>:
 272:	0b d0       	rcall	.+22     	; 0x28a <__mulsf3x>
 274:	9c c0       	rjmp	.+312    	; 0x3ae <__fp_round>
 276:	8d d0       	rcall	.+282    	; 0x392 <__fp_pscA>
 278:	28 f0       	brcs	.+10     	; 0x284 <__mulsf3+0x12>
 27a:	92 d0       	rcall	.+292    	; 0x3a0 <__fp_pscB>
 27c:	18 f0       	brcs	.+6      	; 0x284 <__mulsf3+0x12>
 27e:	95 23       	and	r25, r21
 280:	09 f0       	breq	.+2      	; 0x284 <__mulsf3+0x12>
 282:	7e c0       	rjmp	.+252    	; 0x380 <__fp_inf>
 284:	83 c0       	rjmp	.+262    	; 0x38c <__fp_nan>
 286:	11 24       	eor	r1, r1
 288:	c6 c0       	rjmp	.+396    	; 0x416 <__fp_szero>

0000028a <__mulsf3x>:
 28a:	a2 d0       	rcall	.+324    	; 0x3d0 <__fp_split3>
 28c:	a0 f3       	brcs	.-24     	; 0x276 <__mulsf3+0x4>

0000028e <__mulsf3_pse>:
 28e:	95 9f       	mul	r25, r21
 290:	d1 f3       	breq	.-12     	; 0x286 <__mulsf3+0x14>
 292:	95 0f       	add	r25, r21
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	55 1f       	adc	r21, r21
 298:	62 9f       	mul	r22, r18
 29a:	f0 01       	movw	r30, r0
 29c:	72 9f       	mul	r23, r18
 29e:	bb 27       	eor	r27, r27
 2a0:	f0 0d       	add	r31, r0
 2a2:	b1 1d       	adc	r27, r1
 2a4:	63 9f       	mul	r22, r19
 2a6:	aa 27       	eor	r26, r26
 2a8:	f0 0d       	add	r31, r0
 2aa:	b1 1d       	adc	r27, r1
 2ac:	aa 1f       	adc	r26, r26
 2ae:	64 9f       	mul	r22, r20
 2b0:	66 27       	eor	r22, r22
 2b2:	b0 0d       	add	r27, r0
 2b4:	a1 1d       	adc	r26, r1
 2b6:	66 1f       	adc	r22, r22
 2b8:	82 9f       	mul	r24, r18
 2ba:	22 27       	eor	r18, r18
 2bc:	b0 0d       	add	r27, r0
 2be:	a1 1d       	adc	r26, r1
 2c0:	62 1f       	adc	r22, r18
 2c2:	73 9f       	mul	r23, r19
 2c4:	b0 0d       	add	r27, r0
 2c6:	a1 1d       	adc	r26, r1
 2c8:	62 1f       	adc	r22, r18
 2ca:	83 9f       	mul	r24, r19
 2cc:	a0 0d       	add	r26, r0
 2ce:	61 1d       	adc	r22, r1
 2d0:	22 1f       	adc	r18, r18
 2d2:	74 9f       	mul	r23, r20
 2d4:	33 27       	eor	r19, r19
 2d6:	a0 0d       	add	r26, r0
 2d8:	61 1d       	adc	r22, r1
 2da:	23 1f       	adc	r18, r19
 2dc:	84 9f       	mul	r24, r20
 2de:	60 0d       	add	r22, r0
 2e0:	21 1d       	adc	r18, r1
 2e2:	82 2f       	mov	r24, r18
 2e4:	76 2f       	mov	r23, r22
 2e6:	6a 2f       	mov	r22, r26
 2e8:	11 24       	eor	r1, r1
 2ea:	9f 57       	subi	r25, 0x7F	; 127
 2ec:	50 40       	sbci	r21, 0x00	; 0
 2ee:	8a f0       	brmi	.+34     	; 0x312 <__mulsf3_pse+0x84>
 2f0:	e1 f0       	breq	.+56     	; 0x32a <__mulsf3_pse+0x9c>
 2f2:	88 23       	and	r24, r24
 2f4:	4a f0       	brmi	.+18     	; 0x308 <__mulsf3_pse+0x7a>
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	bb 1f       	adc	r27, r27
 2fc:	66 1f       	adc	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	91 50       	subi	r25, 0x01	; 1
 304:	50 40       	sbci	r21, 0x00	; 0
 306:	a9 f7       	brne	.-22     	; 0x2f2 <__mulsf3_pse+0x64>
 308:	9e 3f       	cpi	r25, 0xFE	; 254
 30a:	51 05       	cpc	r21, r1
 30c:	70 f0       	brcs	.+28     	; 0x32a <__mulsf3_pse+0x9c>
 30e:	38 c0       	rjmp	.+112    	; 0x380 <__fp_inf>
 310:	82 c0       	rjmp	.+260    	; 0x416 <__fp_szero>
 312:	5f 3f       	cpi	r21, 0xFF	; 255
 314:	ec f3       	brlt	.-6      	; 0x310 <__mulsf3_pse+0x82>
 316:	98 3e       	cpi	r25, 0xE8	; 232
 318:	dc f3       	brlt	.-10     	; 0x310 <__mulsf3_pse+0x82>
 31a:	86 95       	lsr	r24
 31c:	77 95       	ror	r23
 31e:	67 95       	ror	r22
 320:	b7 95       	ror	r27
 322:	f7 95       	ror	r31
 324:	e7 95       	ror	r30
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	c1 f7       	brne	.-16     	; 0x31a <__mulsf3_pse+0x8c>
 32a:	fe 2b       	or	r31, r30
 32c:	88 0f       	add	r24, r24
 32e:	91 1d       	adc	r25, r1
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	97 f9       	bld	r25, 7
 336:	08 95       	ret

00000338 <__fp_cmp>:
 338:	99 0f       	add	r25, r25
 33a:	00 08       	sbc	r0, r0
 33c:	55 0f       	add	r21, r21
 33e:	aa 0b       	sbc	r26, r26
 340:	e0 e8       	ldi	r30, 0x80	; 128
 342:	fe ef       	ldi	r31, 0xFE	; 254
 344:	16 16       	cp	r1, r22
 346:	17 06       	cpc	r1, r23
 348:	e8 07       	cpc	r30, r24
 34a:	f9 07       	cpc	r31, r25
 34c:	c0 f0       	brcs	.+48     	; 0x37e <__fp_cmp+0x46>
 34e:	12 16       	cp	r1, r18
 350:	13 06       	cpc	r1, r19
 352:	e4 07       	cpc	r30, r20
 354:	f5 07       	cpc	r31, r21
 356:	98 f0       	brcs	.+38     	; 0x37e <__fp_cmp+0x46>
 358:	62 1b       	sub	r22, r18
 35a:	73 0b       	sbc	r23, r19
 35c:	84 0b       	sbc	r24, r20
 35e:	95 0b       	sbc	r25, r21
 360:	39 f4       	brne	.+14     	; 0x370 <__fp_cmp+0x38>
 362:	0a 26       	eor	r0, r26
 364:	61 f0       	breq	.+24     	; 0x37e <__fp_cmp+0x46>
 366:	23 2b       	or	r18, r19
 368:	24 2b       	or	r18, r20
 36a:	25 2b       	or	r18, r21
 36c:	21 f4       	brne	.+8      	; 0x376 <__fp_cmp+0x3e>
 36e:	08 95       	ret
 370:	0a 26       	eor	r0, r26
 372:	09 f4       	brne	.+2      	; 0x376 <__fp_cmp+0x3e>
 374:	a1 40       	sbci	r26, 0x01	; 1
 376:	a6 95       	lsr	r26
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	81 1d       	adc	r24, r1
 37c:	81 1d       	adc	r24, r1
 37e:	08 95       	ret

00000380 <__fp_inf>:
 380:	97 f9       	bld	r25, 7
 382:	9f 67       	ori	r25, 0x7F	; 127
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	08 95       	ret

0000038c <__fp_nan>:
 38c:	9f ef       	ldi	r25, 0xFF	; 255
 38e:	80 ec       	ldi	r24, 0xC0	; 192
 390:	08 95       	ret

00000392 <__fp_pscA>:
 392:	00 24       	eor	r0, r0
 394:	0a 94       	dec	r0
 396:	16 16       	cp	r1, r22
 398:	17 06       	cpc	r1, r23
 39a:	18 06       	cpc	r1, r24
 39c:	09 06       	cpc	r0, r25
 39e:	08 95       	ret

000003a0 <__fp_pscB>:
 3a0:	00 24       	eor	r0, r0
 3a2:	0a 94       	dec	r0
 3a4:	12 16       	cp	r1, r18
 3a6:	13 06       	cpc	r1, r19
 3a8:	14 06       	cpc	r1, r20
 3aa:	05 06       	cpc	r0, r21
 3ac:	08 95       	ret

000003ae <__fp_round>:
 3ae:	09 2e       	mov	r0, r25
 3b0:	03 94       	inc	r0
 3b2:	00 0c       	add	r0, r0
 3b4:	11 f4       	brne	.+4      	; 0x3ba <__fp_round+0xc>
 3b6:	88 23       	and	r24, r24
 3b8:	52 f0       	brmi	.+20     	; 0x3ce <__fp_round+0x20>
 3ba:	bb 0f       	add	r27, r27
 3bc:	40 f4       	brcc	.+16     	; 0x3ce <__fp_round+0x20>
 3be:	bf 2b       	or	r27, r31
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <__fp_round+0x18>
 3c2:	60 ff       	sbrs	r22, 0
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <__fp_round+0x20>
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	8f 4f       	sbci	r24, 0xFF	; 255
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	08 95       	ret

000003d0 <__fp_split3>:
 3d0:	57 fd       	sbrc	r21, 7
 3d2:	90 58       	subi	r25, 0x80	; 128
 3d4:	44 0f       	add	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	59 f0       	breq	.+22     	; 0x3f0 <__fp_splitA+0x10>
 3da:	5f 3f       	cpi	r21, 0xFF	; 255
 3dc:	71 f0       	breq	.+28     	; 0x3fa <__fp_splitA+0x1a>
 3de:	47 95       	ror	r20

000003e0 <__fp_splitA>:
 3e0:	88 0f       	add	r24, r24
 3e2:	97 fb       	bst	r25, 7
 3e4:	99 1f       	adc	r25, r25
 3e6:	61 f0       	breq	.+24     	; 0x400 <__fp_splitA+0x20>
 3e8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ea:	79 f0       	breq	.+30     	; 0x40a <__fp_splitA+0x2a>
 3ec:	87 95       	ror	r24
 3ee:	08 95       	ret
 3f0:	12 16       	cp	r1, r18
 3f2:	13 06       	cpc	r1, r19
 3f4:	14 06       	cpc	r1, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	f2 cf       	rjmp	.-28     	; 0x3de <__fp_split3+0xe>
 3fa:	46 95       	lsr	r20
 3fc:	f1 df       	rcall	.-30     	; 0x3e0 <__fp_splitA>
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__fp_splitA+0x30>
 400:	16 16       	cp	r1, r22
 402:	17 06       	cpc	r1, r23
 404:	18 06       	cpc	r1, r24
 406:	99 1f       	adc	r25, r25
 408:	f1 cf       	rjmp	.-30     	; 0x3ec <__fp_splitA+0xc>
 40a:	86 95       	lsr	r24
 40c:	71 05       	cpc	r23, r1
 40e:	61 05       	cpc	r22, r1
 410:	08 94       	sec
 412:	08 95       	ret

00000414 <__fp_zero>:
 414:	e8 94       	clt

00000416 <__fp_szero>:
 416:	bb 27       	eor	r27, r27
 418:	66 27       	eor	r22, r22
 41a:	77 27       	eor	r23, r23
 41c:	cb 01       	movw	r24, r22
 41e:	97 f9       	bld	r25, 7
 420:	08 95       	ret

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
